// Paths

$sprite-image: url("/static/noticias/img/sprite.png");
$sprite-image-2x: url("/static/noticias/img/sprite@2x.png");

// Colors

$gray-light: #ecf0f1;
$light-gray: #bcbcbc;
$gray: #717575;
$gray-dark: #2a2a2a;
$darker: #222222;
$cyan-light: #2196f3;
$cyan: #3498db;
$blue: #2175ad;
$blue-bar: #350e67;
$violet: #8e44ad;
$orange: #ff6d00;
$darker-light: #202020;

// Fonts sizes

$fontSize-micro: 10px;
$fontSize-small: 12px;
$fontSize-base: 14px;
$fontSize-large: 16px;
$fontSize-largest: 18px;
$fontSize-jumbo: 24px;

// Line height

$lineHeight-micro: 12px;
$lineHeight-small: 14px;
$lineHeight-base: 16px;
$lineHeight-large: 20px;
$lineHeight-largest: 22px;
$lineHeight-jumbo: 32px;

// Font weight

$fontNormal: 400;
$fontBold: 700;

// Devices

$breakpoint-s: 640px !default;
$breakpoint-m: 960px !default;
$breakpoint-l: 980px !default;
$breakpoint-xl: 1280px !default;
$breakpoint-xxl: 1330px !default;

// Gaps / Calles

$gap-micro: 8px;
$gap-milli: 16px;
$gap-base: 24px;
$gap-kilo: 32px;
$gap-mega: 40px;
$gap-giga: 56px;

// Font settings

@mixin font-settings($size) {
  @if $size == micro {
    font-size: $fontSize-micro;
    line-height: $lineHeight-micro;
  } @else if $size == small {
    font-size: $fontSize-small;
    line-height: $lineHeight-small;
  } @else if $size == base {
    font-size: $fontSize-base;
    line-height: $lineHeight-base;
  } @else if $size == large {
    font-size: $fontSize-large;
    line-height: $lineHeight-large;
  } @else if $size == largest {
    font-size: $fontSize-largest;
    line-height: $lineHeight-largest;
  } @else if $size == jumbo {
    font-size: $fontSize-jumbo;
    line-height: $lineHeight-jumbo;
  }
}

// Border radius

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// Box shadow

//@mixin box-shadow($left:0, $top:2px, $blur:2px, $color:#000, $inset:"") {
//	-webkit-box-shadow:$left $top $blur $color #{$inset};
//	-moz-box-shadow:$left $top $blur $color #{$inset};
//	box-shadow:$left $top $blur $color #{$inset};
//}

@mixin box-shadow(
  $left: 0,
  $top: 2px,
  $blur: 2px,
  $color: #000,
  $inset: false
) {
  @if $inset {
    -webkit-box-shadow: inset $left $top $blur $color;
    -moz-box-shadow: inset $left $top $blur $color;
    box-shadow: inset $left $top $blur $color;
  } @else {
    -webkit-box-shadow: $left $top $blur $color;
    -moz-box-shadow: $left $top $blur $color;
    box-shadow: $left $top $blur $color;
  }
}

// Margins bottom

@mixin margin-bottom($size) {
  @if $size == s {
    margin-bottom: 12px;
  } @else if $size == l {
    margin-bottom: 14px;
  } @else if $size == xl {
    margin-bottom: 16px;
  } @else if $size == xxl {
    margin-bottom: 20px;
  }
}

// Functions & mixings

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// TODO: Change to EM breakpoints
@mixin breakpoint($point) {
  @if $point == retina {
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      @content;
    }
  }
  // quasi-s = small -1
  @else if $point == quasi-s {
    @media (min-width: $breakpoint-s - 1px) {
      @content;
    }
  }
  // s = small
  @else if $point == s {
    @media (min-width: $breakpoint-s) {
      @content;
    }
  }
  // -s = 0 TO small
  @else if $point == -s {
    @media (max-width: $breakpoint-s - 0.01px) {
      @content;
    }
  }
  // -m = 0 TO medium
  @else if $point == -m {
    @media (max-width: $breakpoint-m - 0.01px) {
      @content;
    }
  }
  // s-m = small TO medium
  @else if $point == s-m {
    @media (min-width: $breakpoint-s) and (max-width: $breakpoint-m - 0.01px) {
      @content;
    }
  }
  // s-l = small TO large
  @else if $point == s-l {
    @media (min-width: $breakpoint-s) and (max-width: $breakpoint-l - 0.01px) {
      @content;
    }
  } @else if $point == s-xl {
    @media (min-width: $breakpoint-s) and (max-width: $breakpoint-xl - 0.01px) {
      @content;
    }
  }
  // quasi-m = medium - 1
  @else if $point == quasi-m {
    @media (min-width: $breakpoint-m - 1px) {
      @content;
    }
  }
  // m = medium
  @else if $point == m {
    @media (min-width: $breakpoint-m) {
      @content;
    }
  }
  // m-l = medium TO large
  @else if $point == m-l {
    @media (min-width: $breakpoint-m) and (max-width: $breakpoint-l - 0.01px) {
      @content;
    }
  }
  // m-l = medium TO xlarge
  @else if $point == m-xl {
    @media (min-width: $breakpoint-m) and (max-width: $breakpoint-xl - 0.01px) {
      @content;
    }
  }
  // quasi-l = large
  @else if $point == quasi-l {
    @media (min-width: $breakpoint-l - 1px) {
      @content;
    }
  }
  // l = large
  @else if $point == l {
    @media (min-width: $breakpoint-l) {
      @content;
    }
  }
  // xl = extra large
  @else if $point == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  }
  // xl = extra extra large
  @else if $point == xxl {
    @media (min-width: $breakpoint-xxl) {
      @content;
    }
  }
}

// Animations

// Generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// Rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// Scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// Translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
// Skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}
// Transition
@mixin transition($transition-property, $transition-time, $method) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

@mixin linearGradient(
  $from,
  $from-porcent,
  $middle-1,
  $middle-1-porcent,
  $stop,
  $stop-porcent
) {
  background: $from;
  background: -moz-linear-gradient(
    top,
    $from $from-porcent,
    $middle-1 $middle-1-porcent,
    $stop $stop-porcent
  );
  background: -webkit-gradient(
    left top,
    left bottom,
    color-stop($from-porcent, $from),
    color-stop($middle-1-porcent, $middle-1),
    color-stop($stop-porcent, $stop)
  );
  background: -webkit-linear-gradient(
    top,
    $from $from-porcent,
    $middle-1 $middle-1-porcent,
    $stop $stop-porcent
  );
  background: -o-linear-gradient(
    top,
    $from $from-porcent,
    $middle-1 $middle-1-porcent,
    $stop $stop-porcent
  );
  background: -ms-linear-gradient(
    top,
    $from $from-porcent,
    $middle-1 $middle-1-porcent,
    $stop $stop-porcent
  );
  background: linear-gradient(
    to bottom,
    $from $from-porcent,
    $middle-1 $middle-1-porcent,
    $stop $stop-porcent
  );
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$from', endColorstr='$stop', GradientType=0 );
}
